%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: a2ps output
%%For: CARAT PSEUDO USER
%%Creator: a2ps version 4.8.4
%%CreationDate: Fri May 15 17:21:09 1998
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Symbol
%%+ font Courier
%%+ font Courier-Oblique
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-black+white-Prolog 2.0 1
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1
%%Copyright (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright (c) 1995, 96, 97 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencoded_font {
  findfont exch scalefont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def


% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    FontBBox
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
  df setfont
  % 3. The left title
  gsave
    dup stringwidth pop dfs add exch % leave space took on stack
    dfs hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop dfs add exch % leave space took on stack
    dup
    pw exch stringwidth pop dfs add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub dfs sub dfs sub
    % stk: ct space_left
    fnf setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
    wf setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  df setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  df setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
   fc setfont
  Show
} bind def

/sy {
  false UL
  false BX
   fs setfont
  Show
} bind def

/k {
  false UL
  false BX
   fci setfont
  Show
} bind def

/K {
  false UL
  false BX
   fcb setfont
  Show
} bind def

/c {
  false UL
  false BX
   fci setfont
  Show
} bind def

/C {
  false UL
  false BX
   fce setfont
  Show 
} bind def

/l {
  false UL
  false BX
   fci setfont
  Show
} bind def

/L {
  false UL
  false BX
   fce setfont
  Show 
} bind def

/str{
  false UL
  false BX
   ft setfont
  Show
} bind def

%%EndResource
% ISOLatin1Encoding is already defined in the interpreter
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier-BoldOblique
%%IncludeResource: font Times-Roman
%%EndProlog
%%BeginSetup
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/dfs 8.800000 def
/bfs 8.005733 def
/cw 4.803440 def

/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
% Dictionary for ISOLatin1Encoding support
/Latin1dict 15 dict begin
  /fc  ISOLatin1Encoding bfs /Courier reencoded_font
  /fcb ISOLatin1Encoding bfs /Courier-Bold reencoded_font
  /fci ISOLatin1Encoding bfs /Courier-Oblique reencoded_font
  /fce ISOLatin1Encoding bfs /Courier-BoldOblique reencoded_font
  /ft  ISOLatin1Encoding bfs /Times-Roman reencoded_font
  /df ISOLatin1Encoding dfs /Helvetica reencoded_font
  /fnf ISOLatin1Encoding fnfs /Helvetica-Bold reencoded_font
  /wf ISOLatin1Encoding 100 /Times-Bold reencoded_font
currentdict end def
/fs bfs /Symbol		deffont
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury dfs sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1. INTRODUCTION TO CARAT) p n
(========================) N
() N
() N
(CARAT is a compilation of various small programs written in C, which) N
(can solve certain problems in crystallography.  It is distributed via) N
(     Lehrstuhl B fuer Mathematik) N
(     RWTH-Aachen) N
(     Prof. Plesken) N
(     Templergraben 64) N
(     52064 Aachen) N
(     Germany) N
(     email: carat@momo.math.rwth-aachen.de) N
() N
(Every program should give some online-help if used with the option -h.) N
() N
() N
(1.1 Standalones) N
(===============) N
() N
(There are three categories of programs in CARAT, regarding their importance.) N
() N
(1.1.1 Most frequently used programs) N
(===================================) N
() N
(Here a short list of the most important executables is given. For a) N
(description in some more detail \(syntax, option\), please call them) N
(with option -h.) N
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (=================) N
(Aut_grp) S 8 T () S 16 T () S 24 T () S 32 T (Calculates the automorphism group of) N
() S 8 T () S 16 T () S 24 T () S 32 T (one or more quadratic forms.) N
(Bravais_catalog/Datei) S 24 T () S 32 T (Provides a list of all Bravais group up) N
() S 8 T () S 16 T () S 24 T () S 32 T (to degree 6.) N
(Bravais_grp) S 16 T () S 24 T () S 32 T (Calculates the Bravais group of a finite) N
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group) N
(Bravais_inclusions) S 24 T () S 32 T (Outputs Bravais subgroups/supergroups for a) N
() S 8 T () S 16 T () S 24 T () S 32 T (given Bravais group.) N
(Bravais_type/Symbol) S 24 T () S 32 T (Calculates the family symbol of a finite) N
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group. Also calculates an equivalent) N
() S 8 T () S 16 T () S 24 T () S 32 T (group in the catalog of Bravais groups.) N
() S 8 T () S 16 T () S 24 T () S 32 T (Note that Bravais_type is nothing else then) N
() S 8 T () S 16 T () S 24 T () S 32 T (Symbol -i) N
(Extensions/Vector_systems) S 32 T (Calculates all non-isomorphic extensions of) N
() S 8 T () S 16 T () S 24 T () S 32 T (a finite unimodular group with a given lattice.) N
(Form_space) S 16 T () S 24 T () S 32 T (Calculates the space of invariant forms of) N
() S 8 T () S 16 T () S 24 T () S 32 T (an unimodular group.) N
(Is_finite) S 16 T () S 24 T () S 32 T (Decides finiteness of a given subgroup of) N
() S 8 T () S 16 T () S 24 T () S 32 T (GL_n\(Z\). Calculates the order in case the group) N
() S 8 T () S 16 T () S 24 T () S 32 T (is finite.) N
(Normalizer) S 16 T () S 24 T () S 32 T (Calculates the Normalizer in GL_n\(Z\) of a given) N
() S 8 T () S 16 T () S 24 T () S 32 T (finite unimodular group.) N
(Orbit) S 8 T () S 16 T () S 24 T () S 32 T (Fairly general implementation of the orbit) N
() S 8 T () S 16 T () S 24 T () S 32 T (algorithm.) N
(Order) S 8 T () S 16 T () S 24 T () S 32 T (Calculates the order of a given finite subgroup) N
() S 8 T () S 16 T () S 24 T () S 32 T (of GL_n\(Q\).) N
(Presentation) S 16 T () S 24 T () S 32 T (Calculates a presentation of a finite soluble) N
() S 8 T () S 16 T () S 24 T () S 32 T (subgroup of GL_n\(Z\)) N
(Same_generators) S 16 T () S 24 T () S 32 T (Transforms the generators of a space group) N
() S 8 T () S 16 T () S 24 T () S 32 T (to a prescribed linear part.) N
(QtoZ) S 8 T () S 16 T () S 24 T () S 32 T (Splits a Q-class into Z-classes) N
(README.short) (Page 1/7) (Jul 29, 97 15:28) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Z_equiv) p 8 T () S 16 T () S 24 T () S 32 T (Decides whether two given finite unimodular) N
() S 8 T () S 16 T () S 24 T () S 32 T (groups are conjugated in GL_n\(Z\).) N
() N
(1.1.2 Less frequently used programs) N
(===================================) N
() N
(We continue with given the name of some additional functions which the) N
(user might find useful.) N
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (=================) N
(Bravais_equiv) S 16 T () S 24 T () S 32 T (Decides whether the Bravais groups of two) N
() S 8 T () S 16 T () S 24 T () S 32 T (given finite unimodular groups are conjugated) N
(Conj_bravais) S 16 T () S 24 T () S 32 T (Conjugates a Bravais group with a given matrix) N
(Extract Standard_affine_form) S 32 T (Tools to get from space groups to point groups) N
() S 8 T () S 16 T () S 24 T () S 32 T (and vice versa. Note that Standart_affine_form) N
() S 8 T () S 16 T () S 24 T () S 32 T (is just Extract -t) N
(Idem) S 8 T () S 16 T () S 24 T () S 32 T (Calculates \(rational\) central primitive) N
() S 8 T () S 16 T () S 24 T () S 32 T (idempotents of the enveloping algebra of a) N
() S 8 T () S 16 T () S 24 T () S 32 T (given matrix group.) N
(Invar_space) S 16 T () S 24 T () S 32 T (See Form_space. Is much faster than this,) N
() S 8 T () S 16 T () S 24 T () S 32 T (but uses some random methods.) N
(Isometry) S 16 T () S 24 T () S 32 T (Calculates an isometry of one or more) N
() S 8 T () S 16 T () S 24 T () S 32 T (bilinear forms.) N
(Long_solve) S 16 T () S 24 T () S 32 T (Solves linear systems of equations using) N
() S 8 T () S 16 T () S 24 T () S 32 T (multiple precision integers.) N
(Mink_red) S 16 T () S 24 T () S 32 T (The Minkowski reduction of bilinear forms.) N
() S 8 T () S 16 T () S 24 T () S 32 T (Gives very good results, but use Pair_red) N
() S 8 T () S 16 T () S 24 T () S 32 T (before.) N
(Pair_red) S 16 T () S 24 T () S 32 T (Pair reduction of bilinear forms. Very fast.) N
(Red_gen) S 8 T () S 16 T () S 24 T () S 32 T (Tries to reduce the number of elements of) N
() S 8 T () S 16 T () S 24 T () S 32 T (a generating set of a finite matrix group.) N
(Rein) S 8 T () S 16 T () S 24 T () S 32 T (Purifies a lattice.) N
(Rform) S 8 T () S 16 T () S 24 T () S 32 T (Mostly used for finding a positive definite) N
() S 8 T () S 16 T () S 24 T () S 32 T (G-invariant form or a finite unimodular group) N
() S 8 T () S 16 T () S 24 T () S 32 T (G.) N
(Roundcor) S 16 T () S 24 T () S 32 T (A program calculating a presentation for) N
() S 8 T () S 16 T () S 24 T () S 32 T (finite unimodular groups. Not very reliable,) N
() S 8 T () S 16 T () S 24 T () S 32 T (is to be replaced by a better version soon.) N
(Scpr) S 8 T () S 16 T () S 24 T () S 32 T (Calculates scalar products w.r.t a given form.) N
(Short) S 8 T () S 16 T () S 24 T () S 32 T (Calculates short vectors of a given positive) N
() S 8 T () S 16 T () S 24 T () S 32 T (definite symmetric form.) N
(Shortest) S 16 T () S 24 T () S 32 T (Shortest vectors of a given positive definite) N
() S 8 T () S 16 T () S 24 T () S 32 T (symmetric quadratic form.) N
(Signature) S 16 T () S 24 T () S 32 T (Sylvester type of a quadratic form. In) N
() S 8 T () S 16 T () S 24 T () S 32 T (particular it decides whether a given form) N
() S 8 T () S 16 T () S 24 T () S 32 T (is positive definite.) N
(Sublattices ZZprog) S 24 T () S 32 T (Find G-invariant sublattices of Z^n. Note) N
() S 8 T () S 16 T () S 24 T () S 32 T (that this is a dualisation of finding) N
() S 8 T () S 16 T () S 24 T () S 32 T (centerings.) N
(Tr_bravais) S 16 T () S 24 T () S 32 T (Transposes a finite unimodular group.) N
(Zass_main) S 16 T () S 24 T () S 32 T (Calculates H^1\(G,Q^n/Z^n\) for a given finite) N
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group.) N
() N
(1.1.3 Programs seldom used and those for debugging) N
(==================================================) N
() N
(The remaining functions are merely of debugging and processing the results,) N
(nevertheless an experienced user might calculate relevant data with them.) N
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (=================) N
(README.short) (Page 2/7) (Jul 29, 97 15:28) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (1/4) (Friday May 15, 98) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Add) p 8 T () S 16 T () S 24 T () S 32 T (Adds matrices) N
(Con) S 8 T () S 16 T () S 24 T () S 32 T (Conjugates matrices) N
(Conjugated) S 16 T () S 24 T () S 32 T (Decides whether two groups are conjugate) N
() S 8 T () S 16 T () S 24 T () S 32 T (under third group.) N
(Conv) S 8 T () S 16 T () S 24 T () S 32 T (Converts CARAT input-file \(matrix_TYP\)) N
() S 8 T () S 16 T () S 24 T () S 32 T (into GAP and Maple format.) N
(Elt) S 8 T () S 16 T () S 24 T () S 32 T (An elementary divisors algorithm.) N
(First_perfect) S 16 T () S 24 T () S 32 T (Find G-perfect forms.) N
(Form_elt) S 16 T () S 24 T () S 32 T (Elementary divisors of the trace bilinear form) N
() S 8 T () S 16 T () S 24 T () S 32 T (of a finite unimodular group. Useful for) N
() S 8 T () S 16 T () S 24 T () S 32 T (distinguishing Bravais groups.) N
(Formtovec) S 16 T () S 24 T () S 32 T (Writes a given form as linear combination) N
() S 8 T () S 16 T () S 24 T () S 32 T (of others.) N
(Full) S 8 T () S 16 T () S 24 T () S 32 T (Outputs given matrices in a full form, which) N
() S 8 T () S 16 T () S 24 T () S 32 T (might be easier to edit.) N
(Gauss) S 8 T () S 16 T () S 24 T () S 32 T (An implementation of Gauss's algorithm.) N
(Inv) S 8 T () S 16 T () S 24 T () S 32 T (Inverts matrices.) N
(Kron) S 8 T () S 16 T () S 24 T () S 32 T (Kronecker product of matrices.) N
(Ltm) S 8 T () S 16 T () S 24 T () S 32 T (Inverse to Mtl.) N
(Minpol) S 8 T () S 16 T () S 24 T () S 32 T (Minimal polynomial of integral matrices.) N
(Modp) S 8 T () S 16 T () S 24 T () S 32 T (Takes all entries of a matrix mod p a prime.) N
(Mtl) S 8 T () S 16 T () S 24 T () S 32 T (Writes matrices in lines.) N
(Mul) S 8 T () S 16 T () S 24 T () S 32 T (Multiplies matrices.) N
(Normalizer_in_N) S 16 T () S 24 T () S 32 T (Calculates the normalizer of a finite group) N
() S 8 T () S 16 T () S 24 T () S 32 T (in a second one.) N
(Normlin) N
(P_lse_solve) S 16 T () S 24 T () S 32 T (Solves a system of equations modularly.) N
(Pdet) S 8 T () S 16 T () S 24 T () S 32 T (Determinant of a matrix mod p.) N
(Perfect_neighbours) S 24 T () S 32 T (Gives the perfect neighbours of a given) N
() S 8 T () S 16 T () S 24 T () S 32 T (G-perfect form.) N
(Polyeder) N
(Rest_short) N
(Scalarmul) N
(Short_reduce) N
(Simplify_mat) S 16 T () S 24 T () S 32 T (Divides all entries of a matrix by their) N
() S 8 T () S 16 T () S 24 T () S 32 T (greatest common divisor.) N
(Tr) S 8 T () S 16 T () S 24 T () S 32 T (Transposes matrices.) N
(Trace) S 8 T () S 16 T () S 24 T () S 32 T (Trace of matrices.) N
(Trbifo) S 8 T () S 16 T () S 24 T () S 32 T (Trace bilinear form of a finite unimodular) N
() S 8 T () S 16 T () S 24 T () S 32 T (group.) N
(Vectoform) N
(Vor_vertices) N
() N
(1.2 Files for in/output) N
(========================) N
() N
(In principle CARAT does know two different file formats in which the) N
(in/output takes place. The first and most basic one is the:) N
() N
(1.2.1 matrix_TYP) N
(================) N
() N
(The format of a single matrix for CARAT is a preceding line) N
() N
(NxM  % comment) N
() N
(telling the programs to read a matrix with N lines and M columns. Spaces,) N
(tabs and so on are ignored, and so is everything behind % in the) N
(same line.) N
(Following this line the program will read N*M integers, which represent) N
(the matrix ROW BY ROW, regardless of spaces, cr, tabs and so on.) N
(Therefore all the following examples stand for the same matrix.) N
(README.short) (Page 3/7) (Jul 29, 97 15:28) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(3x4  % most natural way to put it) N
(1  2  3  4) N
(5  6  7  8) N
(9 10 11 12) N
() N
(3x4  % even this) N
(1 2 3 4 5 6 7 8 9 10 11 12) N
() N
(3x4) N
(1 2 3 4 5 6) N
(7 8 9 10 11 12) N
() N
(Furthermore there are some abbreviations allowed, which deal with) N
(square matrices and those having symmetries.) N
(In the header line of a matrix N is equivalent to NxN. The following) N
(examples describe the same matrix:) N
() N
(2x2) N
(1 2) N
(3 4) N
() N
(2) N
(1 2) N
(3 4) N
() N
(Again, formating characters are ignored. Coming to matrices which obey) N
(symmetries CARAT follows the konvention that Nx0 means an symmetric N by) N
(N matrix, of which program just will read the lower triangular.) N
(Note that all the following examples have the same meaning:) N
() N
(2) N
(1 2) N
(2 1) N
() N
(2x0) N
(1) N
(2 1) N
() N
(2x0) N
(1 2 1) N
() N
(The last abbreviation are meant for diagonal matrices, which are Nd1) N
(for a N by N diagonal matrix, of which program will read N diagonal entries,) N
(and Nd0 for a N by N scalar matrix, of which only the defining scalar is read.) N
(Again a couple of outputs meaning the same thing should make it clear.) N
() N
(3x3) N
(2 0 0) N
(0 2 0) N
(0 0 2) N
() N
(3d1) N
(2 2 2) N
() N
(3d0) N
(2) N
() N
(Most programs will read more than one matrix. Therefore a matrix_TYP) N
(normaly constits of a preceding line of the form #A , where A is) N
(the number of matrices to be read.) N
() N
(README.short) (Page 4/7) (Jul 29, 97 15:28) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (2/4) (Friday May 15, 98) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(In the next example we give a matrix_TYP consisting of 2 matrices) p n
(\(which generate a group isomorphic to S_4, the permutation group) N
(on four letters\).) N
() N
(#2) N
(3    % presentation for a transposition) N
(0 1 0) N
(1 0 0) N
(0 0 1) N
() N
(3    % presentation of a 4-cycle) N
( 0  1  0) N
( 0  0  1) N
(-1 -1 -1) N
() N
(1.2.1.2 rational matrices) N
(=========================) N
() N
(The way CARAT presents rational matrices is to divide the whole thing) N
(by an integer:) N
() N
(3/2    % divide the whole matrix by 2) N
(1 2 3) N
(4 5 6) N
(7 8 9) N
() N
(1.2.1.3 A matrix discribing a presentation) N
(=========================================) N
() N
(This is a slight abuse of notation, but nevertheless a matrix_TYP in) N
(CARAT can discribe a finitely presented group.) N
() N
(A single line of this matrix will present a relation fullfilled by) N
(the group, and the biggest entry in modulus will be the number of generators.) N
(Words in the free group translate in the obivious way to a line) N
(of a matrix, therefore we just give a couple of ways of presenting) N
(the group V_4 = C_2 X C_2.) N
() N
(3x4       % we will need 3 relations, the longest of which will have 4 entries) N
(1 1  0  0) N
(2 2  0  0) N
(1 2 -1 -2) N
() N
(The first to lines prescribe the order of the generator x_1 and x_2 to be) N
(two, and the third one is the commutator x_1 * x_2 * x_1^\(-1\) *x_2^\(-1\).) N
() N
(Of course there are various ways to put it, like) N
() N
(3x4) N
(1 1 0 0) N
(2 2 0 0) N
(1 2 1 2) N
() N
(or) N
() N
(3x4) N
(1 1 2 2) N
(1 1 0 0) N
(1 2 1 2) N
() N
() N
(1.2.2 bravais_TYP) N
(README.short) (Page 5/7) (Jul 29, 97 15:28) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(=================) p n
() N
(A bravais_TYP in CARAT is used to decribe a group generated by matrices) N
(together with additional information like their normalizers and) N
(a basis for the space of invariant forms.) N
() N
(The bravais_TYP consists of a header line, which tells the program how) N
(many matrices to be read, and how to interpret them.) N
() N
(This header line takes the following form:) N
() N
(#gA fB ZC nD cE % just a comment) N
() N
(where A,B,C,D and E are natural numbers. It advises the program to read) N
(A+B+C+D+E matrices, where A matrices are meant to generate the group,) N
(the next B matrices form an integral basis of the space of fixed forms,) N
(followed by C matrices giving so called "centerings". The program proceeds) N
(in reading D matrices which generate the normalizer of the group \(modulo) N
(the group generated by the group and its centralizer\), and E matrices) N
(which generate the centralizer of the group.) N
() N
(Note: It is possible to ommit any of the records which discribe generators,) N
(the space of forms and do on, but it is NOT possible to switch components.) N
() N
(The next example gives a bravais_TYP generated by the matrices given in) N
(1.2.1:) N
() N
(#g2 f1 n3 % group with complete normalizer) N
(3) S 8 T (% generator) N
( 0 1 0) N
( 1 0 0) N
( 0 0 1) N
(3) S 8 T (% generator) N
(  0  1  0) N
(  0  0  1) N
( -1 -1 -1) N
(3x0) S 8 T (% invariant form) N
( 2) N
( 1 2) N
( 1 1 2) N
(3) S 8 T (% generator of normalizer) N
(  1  1 1) N
(  0 -1 0) N
( -1  0 0) N
(3) S 8 T (% generator of normalizer) N
( -1 0  0) N
(  0 0 -1) N
(  1 1  1) N
(3x0) S 8 T (% generator of normalizer) N
( 1) N
( 0 0) N
( 0 1 0) N
(2^3  * 3^1   = 24 % order of the group) N
() N
(Note that the order of the group is given at the end, and that it) N
(is factorized.) N
(\(NB: This is the output of Normalizer if run on a file just containing the) N
(matrices of 1.2.1\)) N
() N
(As the reader already saw, the bravais_TYP closes with a tail line which) N
(states the order of the group. The only programs using this lines are the) N
(programs Sublattices \(or ZZprog\), QtoZ Bravais_inclusions and Symbol) N
(README.short) (Page 6/7) (Jul 29, 97 15:28) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (3/4) (Friday May 15, 98) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\(or Bravais_type\) if used with the option -B. These programs assume the) p n
(order given to be right.) N
() N
() N
(2. BUGS) N
(=======) N
() N
(If you find any Bug in CARAT, we are please to here from you. Please) N
(send us a copy of the file you produced the error with, and a log) N
(from the things you did with it.) N
(A short explanation why you encounter the result \(if you got any\) to) N
(be wrong would be helpful as well.) N
() N
(Please send it to: carat@momo.math.rwth-aachen.de) N
() N
(README.short) (Page 7/7) (Jul 29, 97 15:28) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (4/4) (Friday May 15, 98) footer
end % of Latin1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
