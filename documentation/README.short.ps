%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: a2ps output
%%For: CARAT PSEUDO USER
%%Creator: a2ps version 4.8.4
%%CreationDate: Wed Mar 28 16:25:07 2001
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Symbol
%%+ font Courier
%%+ font Courier-Oblique
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-black+white-Prolog 2.0 1
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1
%%Copyright (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright (c) 1995, 96, 97 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencoded_font {
  findfont exch scalefont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def


% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    FontBBox
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
  df setfont
  % 3. The left title
  gsave
    dup stringwidth pop dfs add exch % leave space took on stack
    dfs hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop dfs add exch % leave space took on stack
    dup
    pw exch stringwidth pop dfs add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub dfs sub dfs sub
    % stk: ct space_left
    fnf setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
    wf setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  df setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  df setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
   fc setfont
  Show
} bind def

/sy {
  false UL
  false BX
   fs setfont
  Show
} bind def

/k {
  false UL
  false BX
   fci setfont
  Show
} bind def

/K {
  false UL
  false BX
   fcb setfont
  Show
} bind def

/c {
  false UL
  false BX
   fci setfont
  Show
} bind def

/C {
  false UL
  false BX
   fce setfont
  Show 
} bind def

/l {
  false UL
  false BX
   fci setfont
  Show
} bind def

/L {
  false UL
  false BX
   fce setfont
  Show 
} bind def

/str{
  false UL
  false BX
   ft setfont
  Show
} bind def

%%EndResource
% ISOLatin1Encoding is already defined in the interpreter
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier-BoldOblique
%%IncludeResource: font Times-Roman
%%EndProlog
%%BeginSetup
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/dfs 8.800000 def
/bfs 8.005733 def
/cw 4.803440 def

/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
% Dictionary for ISOLatin1Encoding support
/Latin1dict 15 dict begin
  /fc  ISOLatin1Encoding bfs /Courier reencoded_font
  /fcb ISOLatin1Encoding bfs /Courier-Bold reencoded_font
  /fci ISOLatin1Encoding bfs /Courier-Oblique reencoded_font
  /fce ISOLatin1Encoding bfs /Courier-BoldOblique reencoded_font
  /ft  ISOLatin1Encoding bfs /Times-Roman reencoded_font
  /df ISOLatin1Encoding dfs /Helvetica reencoded_font
  /fnf ISOLatin1Encoding fnfs /Helvetica-Bold reencoded_font
  /wf ISOLatin1Encoding 100 /Times-Bold reencoded_font
currentdict end def
/fs bfs /Symbol		deffont
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury dfs sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1. INTRODUCTION ) p
(TO) K
( CARAT) p n
(========================) N
() N
() N
(CARAT is a compilation ) S
(of) K
( various small programs written ) p
(in) K
( C, which) p n
(can solve certain problems ) S
(in) K
( crystallography.  It is distributed via) p n
(     Lehrstuhl B fuer Mathematik) N
(     RWTH-Aachen) N
(     Prof. Plesken) N
(     Templergraben 64) N
(     52064 Aachen) N
(     Germany) N
(     email: carat@momo.math.rwth-aachen.de) N
() N
(Every ) S
(program ) K
(should give some online-help if used with the option -h.) L
() p n
() N
() N
(1.1 Standalones) N
(===============) N
() N
(There are three categories ) S
(of) K
( programs ) p
(in) K
( CARAT, regarding their importance.) p n
() N
(1.1.1 Most frequently used programs) N
(===================================) N
() N
(Here a short list ) S
(of) K
( the most important executables is given. ) p
(For) K
( a) p n
(description ) S
(in) K
( some more detail \(syntax, option\), please call them) p n
(with) K
( option -h.) p n
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (=================) N
(Aut_grp) S 8 T () S 16 T () S 24 T () S 32 T (Calculates the automorphism group ) S
(of) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (one ) S
(or) K
( more quadratic forms.) p n
(Bravais_catalog/Datei) S 24 T () S 32 T (Provides a list ) S
(of) K
( all Bravais groups up) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(to) K
( degree 6.) p n
(Bravais_grp) S 16 T () S 24 T () S 32 T (Calculates the Bravais group ) S
(of) K
( a finite) p n
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group) N
(Bravais_inclusions) S 24 T () S 32 T (Outputs Bravais subgroups/supergroups ) S
(for) K
( a) p n
() S 8 T () S 16 T () S 24 T () S 32 T (given Bravais group.) N
(Bravais_type/Symbol) S 24 T () S 32 T (Calculates the family symbol ) S
(of) K
( a finite) p n
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group. Also calculates an equivalent) N
() S 8 T () S 16 T () S 24 T () S 32 T (group ) S
(in) K
( the catalog ) p
(of) K
( Bravais groups.) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Note that Bravais_type is nothing ) S
(else) K
( ) p
(then) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (Symbol -i) N
(Extensions/Vector_systems) S 32 T (Calculates all non-isomorphic extensions ) S
(of) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (a finite unimodular group ) S
(with) K
( a given lattice.) p n
(Form_space) S 16 T () S 24 T () S 32 T (Calculates the space ) S
(of) K
( invariant forms ) p
(of) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (a unimodular group.) N
(Graph                           Calculates the "graph ) S
(of) K
( inclusions" ) p
(for) K
( a) p n
(                                given geometric class. ) N
(Is_finite) S 16 T () S 24 T () S 32 T (Decides finiteness ) S
(of) K
( a given subgroup ) p
(of) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (GL_n\(Z\). Calculates the order ) S
(in) K
( case the group) p n
() S 8 T () S 16 T () S 24 T () S 32 T (is finite.) N
(K_Subgroups                     Calculates the maximal klassengleich subgroups ) N
(                                ) S
(of) K
( a spacegroup ) p
(for) K
( some prime-power index.) p n
(K_Supergroups                   Calculates the maximal klassengleich ) N
(                                supergroups ) S
(of) K
( a spacegroup ) p
(for) K
( some ) p n
(                                prime-power index.) N
(Name                            Give a space group a name, ie. calculate) N
(                                a ) S
(string) k
( which describes the isomorphism) p n
(                                ) S
(type) K
( uniquely, cf. Reverse_name.) p n
(Normalizer) S 16 T () S 24 T () S 32 T (Calculates the Normalizer ) S
(in) K
( GL_n\(Z\) ) p
(of) K
( a given) p n
(README.short) (Page 1/7) (Mar 28, 01 16:03) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T (finite unimodular group.) N
(Orbit) S 8 T () S 16 T () S 24 T () S 32 T (Fairly general ) S
(implementation ) K
(of the) L
() p n
(                                orbit/stabilizer algorithm.) N
(Order) S 8 T () S 16 T () S 24 T () S 32 T (Calculates the order ) S
(of) K
( a given finite subgroup) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(of) K
( GL_n\(Q\).) p n
(Q_catalog                       Provides a list ) S
(of) K
( all Q_classes up) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(to) K
( degree 6.) p n
(QtoZ) S 8 T () S 16 T () S 24 T () S 32 T (Splits a Q-class into Z-classes.) N
(Reverse_name                    Constructs a space group ) S
(with) K
( given name,) p n
(                                ) S
(and) K
( check whether the name is valid, cf.) p n
(                                Name.) N
(Same_generators) S 16 T () S 24 T () S 32 T (Transforms the generators ) S
(of) K
( a space group) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(to) K
( a prescribed linear part.) p n
(Torsionfree                     Decides whether a given space group is) N
(                                torsion free. WARNING: The ) S
(program ) K
(assumes) L
() p n
(                                the translation subgroup ) S
(to) K
( be Z^n.) p n
(Z_equiv) S 8 T () S 16 T () S 24 T () S 32 T (Decides whether two given finite unimodular) N
() S 8 T () S 16 T () S 24 T () S 32 T (groups are conjugated ) S
(in) K
( GL_n\(Z\).) p n
() N
(1.1.2 Less frequently used programs) N
(===================================) N
() N
(We continue ) S
(with) K
( given the name ) p
(of) K
( some additional functions which the) p n
(user might find useful.) N
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (=================) N
(Bravais_equiv) S 16 T () S 24 T () S 32 T (Decides whether the Bravais groups ) S
(of) K
( two) p n
() S 8 T () S 16 T () S 24 T () S 32 T (given finite unimodular groups are conjugated) N
(Conj_bravais) S 16 T () S 24 T () S 32 T (Conjugates a Bravais group ) S
(with) K
( a given matrix) p n
(Extract Standard_affine_form) S 32 T (Tools ) S
(to) K
( get from space groups ) p
(to) K
( point groups) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(and) K
( vice versa. Note that Standard_affine_form) p n
() S 8 T () S 16 T () S 24 T () S 32 T (is just Extract -t) N
(Idem) S 8 T () S 16 T () S 24 T () S 32 T (Calculates \(rational\) central primitive) N
() S 8 T () S 16 T () S 24 T () S 32 T (idempotents ) S
(of) K
( the enveloping algebra ) p
(of) K
( a) p n
() S 8 T () S 16 T () S 24 T () S 32 T (given matrix group.) N
(Invar_space) S 16 T () S 24 T () S 32 T (See Form_space. Is much faster than this,) N
() S 8 T () S 16 T () S 24 T () S 32 T (but ) S
(uses) K
( some random methods.) p n
(Isometry) S 16 T () S 24 T () S 32 T (Calculates an isometry ) S
(of) K
(  ) p
(with) K
( respect ) p
(to) K
() p n
(                                tuples ) S
(of) K
( bilinear forms.) p n
(Long_solve) S 16 T () S 24 T () S 32 T (Solves linear systems ) S
(of) K
( equations using) p n
() S 8 T () S 16 T () S 24 T () S 32 T (multiple precision integers.) N
(Mink_red) S 16 T () S 24 T () S 32 T (The Minkowski reduction ) S
(of) K
( bilinear forms.) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Gives very good results, but use Pair_red) N
() S 8 T () S 16 T () S 24 T () S 32 T (before.) N
(Pair_red) S 16 T () S 24 T () S 32 T (Pair reduction ) S
(of) K
( bilinear forms. Very fast.) p n
(Presentation                    Calculates a presentation ) S
(of) K
( a finite soluble) p n
(                                subgroup ) S
(of) K
( GL_n\(Z\)) p n
(Red_gen) S 8 T () S 16 T () S 24 T () S 32 T (Tries ) S
(to) K
( reduce the number ) p
(of) K
( elements ) p
(of) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (a generating ) S
(set) K
( ) p
(of) K
( a finite matrix group.) p n
(Rein) S 8 T () S 16 T () S 24 T () S 32 T (Purifies a lattice.) N
(Rform) S 8 T () S 16 T () S 24 T () S 32 T (Mostly used ) S
(for) K
( finding a positive definite) p n
() S 8 T () S 16 T () S 24 T () S 32 T (G-invariant form ) S
(or) K
( a finite unimodular group) p n
() S 8 T () S 16 T () S 24 T () S 32 T (G.) N
(Scpr) S 8 T () S 16 T () S 24 T () S 32 T (Calculates scalar products w.r.t a given form.) N
(Short) S 8 T () S 16 T () S 24 T () S 32 T (Calculates short vectors ) S
(of) K
( a given positive) p n
() S 8 T () S 16 T () S 24 T () S 32 T (definite symmetric form.) N
(Shortest) S 16 T () S 24 T () S 32 T (Shortest vectors ) S
(of) K
( a given positive definite) p n
() S 8 T () S 16 T () S 24 T () S 32 T (symmetric quadratic form.) N
(Signature) S 16 T () S 24 T () S 32 T (Sylvester ) S
(type) K
( ) p
(of) K
( a quadratic form. ) p
(In) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (particular it decides whether a given form) N
() S 8 T () S 16 T () S 24 T () S 32 T (is positive definite.) N
(README.short) (Page 2/7) (Mar 28, 01 16:03) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (1/4) (Wednesday March 28, 01) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Sublattices ZZprog) p 24 T () S 32 T (Find G-invariant sublattices ) S
(of) K
( Z^n. Note) p n
() S 8 T () S 16 T () S 24 T () S 32 T (that this is a dualisation ) S
(of) K
( finding) p n
() S 8 T () S 16 T () S 24 T () S 32 T (centerings.) N
(Tr_bravais) S 16 T () S 24 T () S 32 T (Transposes a finite unimodular group.) N
(Zass_main) S 16 T () S 24 T () S 32 T (Calculates H^1\(G,Q^n/Z^n\) ) S
(for) K
( a given finite) p n
() S 8 T () S 16 T () S 24 T () S 32 T (unimodular group.) N
() N
(1.1.3 Programs seldom used ) S
(and) K
( those ) p
(for) K
( debugging) p n
(==================================================) N
() N
(The remaining functions are merely ) S
(of) K
( debugging ) p
(and) K
( processing the results,) p n
(nevertheless an experienced user might calculate relevant data ) S
(with) K
( them.) p n
() N
(Program/Synonyms) S 24 T () S 32 T (Short description) N
(================) S 24 T () S 32 T (================= Add) S 56 T () S 64 T () S 72 T () S 80 T () N
(Adds matrices) N
(Con) S 8 T () S 16 T () S 24 T () S 32 T (Conjugates matrices) N
(Conjugated) S 16 T () S 24 T () S 32 T (Decides whether two groups are conjugate) N
() S 8 T () S 16 T () S 24 T () S 32 T (under third group.) N
(Conv) S 8 T () S 16 T () S 24 T () S 32 T (Converts CARAT input-) S
(file) K
( \(matrix_TYP\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (into GAP ) S
(and) K
( Maple format.) p n
(Elt) S 8 T () S 16 T () S 24 T () S 32 T (An elementary divisors algorithm.) N
(First_perfect) S 16 T () S 24 T () S 32 T (Find G-perfect forms.) N
(Form_elt) S 16 T () S 24 T () S 32 T (Elementary divisors ) S
(of) K
( the trace bilinear form) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(of) K
( a finite unimodular group. Useful ) p
(for) K
() p n
() S 8 T () S 16 T () S 24 T () S 32 T (distinguishing Bravais groups.) N
(Formtovec) S 16 T () S 24 T () S 32 T (Writes a given form as linear combination) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(of) K
( others.) p n
(Full) S 8 T () S 16 T () S 24 T () S 32 T (Outputs given matrices ) S
(in) K
( a full form, which) p n
() S 8 T () S 16 T () S 24 T () S 32 T (might be easier ) S
(to) K
( edit.) p n
(Gauss) S 8 T () S 16 T () S 24 T () S 32 T (An ) S
(implementation ) K
(of Gauss's algorithm.) L
() p n
(Inv) S 8 T () S 16 T () S 24 T () S 32 T (Inverts matrices.) N
(Kron) S 8 T () S 16 T () S 24 T () S 32 T (Kronecker product ) S
(of) K
( matrices.) p n
(Ltm) S 8 T () S 16 T () S 24 T () S 32 T (Inverse ) S
(to) K
( Mtl.) p n
(Minpol) S 8 T () S 16 T () S 24 T () S 32 T (Minimal polynomial ) S
(of) K
( integral matrices.) p n
(Modp) S 8 T () S 16 T () S 24 T () S 32 T (Takes all entries ) S
(of) K
( a matrix ) p
(mod) k
( p a prime.) p n
(Mtl) S 8 T () S 16 T () S 24 T () S 32 T (Writes matrices ) S
(in) K
( lines.) p n
(Mul) S 8 T () S 16 T () S 24 T () S 32 T (Multiplies matrices.) N
(Normalizer_in_N) S 16 T () S 24 T () S 32 T (Calculates the normalizer ) S
(of) K
( a finite group) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(in) K
( a second one.) p n
(Normlin                         Calculates ) S
(for) K
( each matrix A ) p
(in) K
( ) p
(file) K
(2 a matrix ) p n
(                                X ) S
(with) K
( the property that) p n
(                                \\sum_j X_) S
({i,j}) c
( F_j = A^) p
({tr}) c
( F_j A) p n
(                                ) S
(with) K
( F_j ) p
(in) K
( ') p
(file1) str
(') p n
(P_lse_solve) S 16 T () S 24 T () S 32 T (Solves a system ) S
(of) K
( equations modularly.) p n
(Pdet) S 8 T () S 16 T () S 24 T () S 32 T (Determinant ) S
(of) K
( a matrix ) p
(mod) k
( p.) p n
(Perfect_neighbours) S 24 T () S 32 T (Gives the perfect neighbours ) S
(of) K
( a given) p n
() S 8 T () S 16 T () S 24 T () S 32 T (G-perfect form.) N
(Polyeder) N
(Rest_short) N
(Scalarmul                       Multiplies matrices ) S
(with) K
( rational number.) p n
(Short_reduce) N
(Simplify_mat) S 16 T () S 24 T () S 32 T (Divides all entries ) S
(of) K
( a matrix by their) p n
() S 8 T () S 16 T () S 24 T () S 32 T (greatest common divisor.) N
(Tr) S 8 T () S 16 T () S 24 T () S 32 T (Transposes matrices.) N
(Trace) S 8 T () S 16 T () S 24 T () S 32 T (Trace ) S
(of) K
( matrices.) p n
(Trbifo) S 8 T () S 16 T () S 24 T () S 32 T (Trace bilinear form ) S
(of) K
( a finite unimodular) p n
() S 8 T () S 16 T () S 24 T () S 32 T (group.) N
(Vectoform                       Calculates a linear combintion ) S
(of) K
( forms.) p n
(Vor_vertices) N
() N
(1.2 Files ) S
(for) K
( ) p
(in) K
(/output) p n
(README.short) (Page 3/7) (Mar 28, 01 16:03) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(========================) p n
() N
(In) K
( principle CARAT does know two different ) p
(file) K
( formats ) p
(in) K
( which the) p n
(in) K
(/output takes place. The first ) p
(and) K
( most basic one is matrix_TYP, cf.) p n
(1.2.1 below ) S
(and) K
( the second ) p
(and) K
( most frequent one is bravais_TYP, cf.) p n
(1.2.2 below.) N
() N
(1.2.1 matrix_TYP) N
(================) N
() N
(The format ) S
(of) K
( a single matrix ) p
(for) K
( CARAT is a preceding line) p n
() N
(NxM  % comment) N
() N
(telling the programs ) S
(to) K
( ) p
(read) K
( a matrix ) p
(with) K
( N lines ) p
(and) K
( M columns. Spaces,) p n
(tabs ) S
(and) K
( so on are ignored, ) p
(and) K
( so is everything behind % ) p
(in) K
( the) p n
(same line.) N
(Following this line the ) S
(program ) K
(will read N*M integers, which represent) L
() p n
(the matrix ROW BY ROW, regardless ) S
(of) K
( spaces, cr, tabs ) p
(and) K
( so on.) p n
(Therefore all the following examples stand ) S
(for) K
( the same matrix.) p n
() N
(3x4  % most natural way ) S
(to) K
( put it) p n
(1  2  3  4) N
(5  6  7  8) N
(9 10 11 12) N
() N
(3x4  % even this) N
(1 2 3 4 5 6 7 8 9 10 11 12) N
() N
(3x4) N
(1 2 3 4 5 6) N
(7 8 9 10 11 12) N
() N
(Furthermore there are some abbreviations allowed, which deal ) S
(with) K
() p n
(square matrices ) S
(and) K
( those having symmetries.) p n
(In) K
( the header line ) p
(of) K
( a matrix N is equivalent ) p
(to) K
( NxN. The following) p n
(examples describe the same matrix:) N
() N
(2x2) N
(1 2) N
(3 4) N
() N
(2) N
(1 2) N
(3 4) N
() N
(Again, formating characters are ignored. Coming ) S
(to) K
( matrices which obey) p n
(symmetries CARAT follows the konvention that Nx0 means an symmetric N by) N
(N matrix, ) S
(of) K
( which ) p
(program ) K
(just will read the lower triangular.) L
() p n
(Note that all the following examples have the same meaning:) N
() N
(2) N
(1 2) N
(2 1) N
() N
(2x0) N
(1) N
(2 1) N
() N
(2x0) N
(1 2 1) N
() N
(README.short) (Page 4/7) (Mar 28, 01 16:03) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (2/4) (Wednesday March 28, 01) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(The last abbreviation are meant ) p
(for) K
( diagonal matrices, which are Nd1) p n
(for) K
( a N by N diagonal matrix, ) p
(of) K
( which ) p
(program ) K
(will read N diagonal entries,) L
() p n
(and) K
( Nd0 ) p
(for) K
( a N by N scalar matrix, ) p
(of) K
( which only the defining scalar is ) p
(read) K
(.) p n
(Again a couple ) S
(of) K
( outputs meaning the same thing should make it clear.) p n
() N
(3x3) N
(2 0 0) N
(0 2 0) N
(0 0 2) N
() N
(3d1) N
(2 2 2) N
() N
(3d0) N
(2) N
() N
(Most programs will ) S
(read) K
( more than one matrix. Therefore a matrix_TYP) p n
(normaly constits ) S
(of) K
( a preceding line ) p
(of) K
( the form #A , where A is) p n
(the number ) S
(of) K
( matrices ) p
(to) K
( be ) p
(read) K
(.) p n
() N
(In) K
( the next example we give a matrix_TYP consisting ) p
(of) K
( 2 matrices) p n
(\(which generate a group isomorphic ) S
(to) K
( S_4, the permutation group) p n
(on four letters\).) N
() N
(#2) N
(3    % presentation ) S
(for) K
( a transposition) p n
(0 1 0) N
(1 0 0) N
(0 0 1) N
() N
(3    % presentation ) S
(of) K
( a 4-cycle) p n
( 0  1  0) N
( 0  0  1) N
(-1 -1 -1) N
() N
(1.2.1.2 rational matrices) N
(=========================) N
() N
(The way CARAT presents rational matrices is ) S
(to) K
( divide the whole thing) p n
(by an ) S
(integer) k
(:) p n
() N
(3/2    % divide the whole matrix by 2) N
(1 2 3) N
(4 5 6) N
(7 8 9) N
() N
(1.2.1.3 A matrix discribing a presentation) N
(=========================================) N
() N
(This is a slight abuse ) S
(of) K
( notation, but nevertheless a matrix_TYP ) p
(in) K
() p n
(CARAT can discribe a finitely presented group.) N
() N
(A single line ) S
(of) K
( this matrix will present a relation fullfilled by the) p n
(generators ) S
(of) K
( the group, ) p
(and) K
( the biggest entry ) p
(in) K
( modulus will be the) p n
(number ) S
(of) K
( generators.) p n
(Words ) S
(in) K
( the free group translate ) p
(in) K
( the obvious way ) p
(to) K
( a line) p n
(of) K
( a matrix, therefore we just give a couple ) p
(of) K
( ways ) p
(of) K
( presenting) p n
(the group V_4 = C_2 X C_2. ) S
(To) K
( make the matrix rectangular, fill) p n
(the shorter rows ) S
(with) K
( zeroes.) p n
() N
(3x4       % we will need 3 relations, the longest ) S
(of) K
( which will have 4 entries) p n
(1 1  0  0) N
(README.short) (Page 5/7) (Mar 28, 01 16:03) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(2 2  0  0) p n
(1 2 -1 -2) N
() N
(The three lines ) S
(read) K
(: x_1*x_1 = 1, x_2*x_2 = 1, x_1*x_2*x_1^\(-1\)*x_2^\(-1\) = 1.) p n
() N
(Of) K
( course there are various ways ) p
(to) K
( put it, like) p n
() N
(3x4) N
(1 1 0 0) N
(2 2 0 0) N
(1 2 1 2) N
() N
(or) K
() p n
() N
(3x4) N
(1 1 2 2) N
(1 1 0 0) N
(1 2 1 2) N
() N
() N
(1.2.2 bravais_TYP) N
(=================) N
() N
(A bravais_TYP ) S
(in) K
( CARAT is used ) p
(to) K
( decribe a group generated by matrices) p n
(together ) S
(with) K
( additional information like their normalizers ) p
(and) K
() p n
(a basis ) S
(for) K
( the space ) p
(of) K
( invariant forms.) p n
() N
(The bravais_TYP consists ) S
(of) K
( a header line, which tells the ) p
(program ) K
(how) L
() p n
(many matrices ) S
(to) K
( be ) p
(read) K
(, ) p
(and) K
( how ) p
(to) K
( interpret them.) p n
() N
(This header line takes the following form:) N
() N
(#gA fB ZC nD cE % just a comment) N
() N
(where A, B, C, D ) S
(and) K
( E are natural numbers. It advises the ) p
(program ) K
(to read) L
() p n
(A + B + C + D + E matrices, where A matrices are meant ) S
(to) K
( generate the group,) p n
(the next B matrices form an integral basis ) S
(of) K
( the space ) p
(of) K
( fixed forms,) p n
(followed by C matrices giving so called "centerings". The ) S
(program ) K
(proceeds) L
() p n
(in) K
( reading D matrices which generate the normalizer ) p
(of) K
( the group \(modulo) p n
(the group generated by the group ) S
(and) K
( its centralizer\), ) p
(and) K
( E matrices) p n
(which generate the centralizer ) S
(of) K
( the group.) p n
() N
(Note: It is possible ) S
(to) K
( ommit any ) p
(of) K
( the records which discribe generators,) p n
(the space ) S
(of) K
( forms ) p
(and) K
( so on, but it is ) p
(NOT) K
( possible ) p
(to) K
( switch components.) p n
() N
(The next example gives a bravais_TYP generated by the matrices given ) S
(in) K
() p n
(1.2.1:) N
() N
(#g2 f1 n3 % group ) S
(with) K
( complete normalizer) p n
(3) S 8 T (% generator) N
( 0 1 0) N
( 1 0 0) N
( 0 0 1) N
(3) S 8 T (% generator) N
(  0  1  0) N
(  0  0  1) N
( -1 -1 -1) N
(3x0) S 8 T (% invariant form) N
( 2) N
( 1 2) N
( 1 1 2) N
(3) S 8 T (% generator ) S
(of) K
( normalizer) p n
(README.short) (Page 6/7) (Mar 28, 01 16:03) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (3/4) (Wednesday March 28, 01) footer
end % of Latin1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
sh 0 translate
90 rotate
% Encoding is ISO8859-1
Latin1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  1  1 1) p n
(  0 -1 0) N
( -1  0 0) N
(3) S 8 T (% generator ) S
(of) K
( normalizer) p n
( -1 0  0) N
(  0 0 -1) N
(  1 1  1) N
(3x0) S 8 T (% generator ) S
(of) K
( normalizer) p n
( 1) N
( 0 0) N
( 0 1 0) N
(2^3  * 3^1   = 24 % order ) S
(of) K
( the group) p n
() N
(Note that the order ) S
(of) K
( the group is given at the ) p
(end) K
(, ) p
(and) K
( that it) p n
(is factorized.) N
(\(NB: This is the output ) S
(of) K
( Normalizer ) p
(if) K
( run on a ) p
(file) K
( just containing the) p n
(matrices ) S
(of) K
( 1.2.1\)) p n
() N
(As the reader already saw, the bravais_TYP closes ) S
(with) K
( a tail line which) p n
(states the order ) S
(of) K
( the group. The only programs using this lines are the) p n
(programs Sublattices \() S
(or) K
( ZZprog\), QtoZ Bravais_inclusions ) p
(and) K
( Symbol) p n
(\() S
(or) K
( Bravais_type\) ) p
(if) K
( used ) p
(with) K
( the option -B. These programs assume the) p n
(order given ) S
(to) K
( be right.) p n
() N
() N
(2. BUGS) N
(=======) N
() N
(If) K
( you find any Bug ) p
(in) K
( CARAT, we are please ) p
(to) K
( here from you. Please) p n
(send us a copy ) S
(of) K
( the ) p
(file) K
( you produced the error ) p
(with) K
(, ) p
(and) K
( a log) p n
(from the things you did ) S
(with) K
( it.) p n
(A short explanation why you encounter the result \() S
(if) K
( you got any\) ) p
(to) K
() p n
(be wrong would be helpful as well.) N
() N
(Please send it ) S
(to) K
(: carat@momo.math.rwth-aachen.de) p n
() N
(README.short) (Page 7/7) (Mar 28, 01 16:03) title
border
% End of virtual page
grestore
(Printed by CARAT PSEUDO USER) rhead
(README.short) (4/4) (Wednesday March 28, 01) footer
end % of Latin1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
